/*
 * Created on 2019-03-14 ( Time 16:44:08 )
 * Generated by Telosys Tools Generator ( version 3.0.0 )
 */
package com.source.library.business.service;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

import javax.annotation.Resource;

import com.source.library.bean.Roles;
import com.source.library.bean.jpa.MembersEntity;
import com.source.library.bean.jpa.RolesEntity;
import com.source.library.business.service.mapping.RolesServiceMapper;
import com.source.library.data.repository.jpa.RolesJpaRepository;

import org.springframework.transaction.annotation.Transactional;
import org.springframework.stereotype.Service;

/**
 * Definition of RolesService
 */
@Service
@Transactional
public class RolesService {

	@Resource
	private RolesJpaRepository rolesJpaRepository;

	@Resource
	private RolesServiceMapper rolesServiceMapper;
	
	public Roles findById(Integer roleId) {
		
		Optional<RolesEntity> rolesEntity = rolesJpaRepository.findById(roleId);
		if (rolesEntity.isPresent())
			return rolesServiceMapper.mapRolesEntityToRoles(rolesEntity.get());
		else
			throw new IllegalStateException("object doesn't exist");
		
		
	}

	public List<Roles> findAll() {
		Iterable<RolesEntity> entities = rolesJpaRepository.findAll();
		List<Roles> beans = new ArrayList<Roles>();
		for(RolesEntity rolesEntity : entities) {
			beans.add(rolesServiceMapper.mapRolesEntityToRoles(rolesEntity));
		}
		return beans;
	}

	public Roles save(Roles roles) {
		return update(roles) ;
	}

	public Roles create(Roles roles) {
		RolesEntity rolesEntity;
		if(roles.getRoleId() != null){
			Optional<RolesEntity> optional = rolesJpaRepository.findById(roles.getRoleId());
			if( optional.isPresent() ) {
				throw new IllegalStateException("already.exists");
			}
		}
		rolesEntity = new RolesEntity();
		rolesServiceMapper.mapRolesToRolesEntity(roles, rolesEntity);
		RolesEntity rolesEntitySaved = rolesJpaRepository.save(rolesEntity);
		return rolesServiceMapper.mapRolesEntityToRoles(rolesEntitySaved);
	}

	public Roles update(Roles roles) {
		RolesEntity rolesEntity = rolesJpaRepository.findById(roles.getRoleId()).orElse(null);
		rolesServiceMapper.mapRolesToRolesEntity(roles, rolesEntity);
		RolesEntity rolesEntitySaved = rolesJpaRepository.save(rolesEntity);
		return rolesServiceMapper.mapRolesEntityToRoles(rolesEntitySaved);
	}

	public void delete(Integer roleId) {
		rolesJpaRepository.deleteById(roleId);
	}

	public RolesJpaRepository getRolesJpaRepository() {
		return rolesJpaRepository;
	}

	public void setRolesJpaRepository(RolesJpaRepository rolesJpaRepository) {
		this.rolesJpaRepository = rolesJpaRepository;
	}

	public RolesServiceMapper getRolesServiceMapper() {
		return rolesServiceMapper;
	}

	public void setRolesServiceMapper(RolesServiceMapper rolesServiceMapper) {
		this.rolesServiceMapper = rolesServiceMapper;
	}

}
