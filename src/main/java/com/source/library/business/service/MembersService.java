/*
 * Created on 2019-03-14 ( Time 16:44:08 )
 * Generated by Telosys Tools Generator ( version 3.0.0 )
 */
package com.source.library.business.service;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

import javax.annotation.Resource;

import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Sort;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.source.library.bean.Members;
import com.source.library.bean.Roles;
import com.source.library.bean.jpa.BooksEntity;
import com.source.library.bean.jpa.MembersEntity;
import com.source.library.bean.jpa.RolesEntity;
import com.source.library.business.service.mapping.MembersServiceMapper;
import com.source.library.business.service.mapping.RolesServiceMapper;
import com.source.library.data.repository.jpa.MembersJpaRepository;
import com.source.library.data.repository.jpa.RolesJpaRepository;

/**
 * Definition of MembersService
 */
@Service
@Transactional
public class MembersService {

	@Resource
	private MembersJpaRepository membersJpaRepository;

	@Resource
	private MembersServiceMapper membersServiceMapper;
	
	@Resource
	private RolesJpaRepository rolesJpaRepository;

	@Resource
	private RolesServiceMapper rolesServiceMapper;
	
	public Members findById(Integer memberId) {

		Optional<MembersEntity> membersEntity = membersJpaRepository.findById(memberId);
		if (membersEntity.isPresent())
			return membersServiceMapper.mapMembersEntityToMembers(membersEntity.get());
		else
			throw new IllegalStateException("object doesn't exist");
		
	}
	
	public List<Members> findAll() {
		Iterable<MembersEntity> entities = membersJpaRepository.findAll();
		List<Members> beans = new ArrayList<Members>();
		for(MembersEntity membersEntity : entities) {
			beans.add(membersServiceMapper.mapMembersEntityToMembers(membersEntity));
		}
		return beans;
	}
	
	public List<Members> findPage(int pageIndex) {
		PageRequest pr = PageRequest.of(pageIndex, 10, Sort.Direction.DESC, "memberId");
		Iterable<MembersEntity> entities = membersJpaRepository.findAllJoinFetch(pr); //findAll();
		List<Members> beans = new ArrayList<Members>();
		for(MembersEntity membersEntity : entities) {
			beans.add(membersServiceMapper.mapMembersEntityToMembers(membersEntity));
		}
		return beans;
	}

	public Members save(Members members) {
		return update(members) ;
	}

	public Members create(Members members, Roles role) {
		MembersEntity membersEntity;
		if(members.getMemberId() != null){
			Optional<MembersEntity> optional = membersJpaRepository.findById(members.getMemberId());
			if( optional.isPresent() ) {
				throw new IllegalStateException("already.exists");
			}
		}
		
		membersEntity = new MembersEntity();
		membersServiceMapper.mapMembersToMembersEntity(members, membersEntity);
		MembersEntity membersEntitySaved = membersJpaRepository.save(membersEntity);
		role.setMemberId(membersEntitySaved.getMemberId());
		RolesEntity rolesEntity = new RolesEntity();
		rolesServiceMapper.mapRolesToRolesEntity(role, rolesEntity);
		rolesJpaRepository.save(rolesEntity);
				
		return membersServiceMapper.mapMembersEntityToMembers(membersEntitySaved);
	}

	public Members update(Members members) {
		MembersEntity membersEntity = membersJpaRepository.findById(members.getMemberId()).orElse(null);
		membersServiceMapper.mapMembersToMembersEntity(members, membersEntity);
		MembersEntity membersEntitySaved = membersJpaRepository.save(membersEntity);
		return membersServiceMapper.mapMembersEntityToMembers(membersEntitySaved);
	}

	public void delete(Integer userId) {
		membersJpaRepository.deleteById(userId);
	}

	public MembersJpaRepository getMembersJpaRepository() {
		return membersJpaRepository;
	}

	public void setMembersJpaRepository(MembersJpaRepository membersJpaRepository) {
		this.membersJpaRepository = membersJpaRepository;
	}

	public MembersServiceMapper getMembersServiceMapper() {
		return membersServiceMapper;
	}

	public void setMembersServiceMapper(MembersServiceMapper membersServiceMapper) {
		this.membersServiceMapper = membersServiceMapper;
	}

}
