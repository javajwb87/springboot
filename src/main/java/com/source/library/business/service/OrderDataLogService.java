/*
 * Created on 2021-09-27 ( Time 22:53:20 )
 * Generated by Telosys Tools Generator ( version 3.0.0 )
 */
package com.source.library.business.service;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;
import javax.annotation.Resource;

import java.util.Date;

import com.source.library.bean.OrderDataLog;
import com.source.library.bean.jpa.OrderDataLogEntity;
import com.source.library.business.service.mapping.OrderDataLogServiceMapper;
import com.source.library.data.repository.jpa.OrderDataLogJpaRepository;

import org.springframework.transaction.annotation.Transactional;
import org.springframework.stereotype.Service;

/**
 * Definition of OrderDataLogService
 */
@Service
@Transactional
public class OrderDataLogService {

	@Resource
	private OrderDataLogJpaRepository orderDataLogJpaRepository;

	@Resource
	private OrderDataLogServiceMapper orderDataLogServiceMapper;
	
	public OrderDataLog findById(Integer orderDataLogId) {
		Optional<OrderDataLogEntity> orderDataLogEntity = orderDataLogJpaRepository.findById(orderDataLogId);

		if (orderDataLogEntity.isPresent())
			return orderDataLogServiceMapper.mapOrderDataLogEntityToOrderDataLog(orderDataLogEntity.get());
		else
			throw new IllegalStateException("object doesn't exist");
	}

	public List<OrderDataLog> findAll() {
		Iterable<OrderDataLogEntity> entities = orderDataLogJpaRepository.findAll();
		List<OrderDataLog> beans = new ArrayList<OrderDataLog>();
		for(OrderDataLogEntity orderDataLogEntity : entities) {
			beans.add(orderDataLogServiceMapper.mapOrderDataLogEntityToOrderDataLog(orderDataLogEntity));
		}
		return beans;
	}

	public OrderDataLog save(OrderDataLog orderDataLog) {
		return update(orderDataLog) ;
	}

	public OrderDataLog create(OrderDataLog orderDataLog) {
		OrderDataLogEntity orderDataLogEntity;
		if(orderDataLog.getOrderDataLogId() != null){
			Optional<OrderDataLogEntity> optional = orderDataLogJpaRepository.findById(orderDataLog.getOrderDataLogId());
			if( optional.isPresent() ) {
				throw new IllegalStateException("already.exists");
			}
		}
		orderDataLogEntity = new OrderDataLogEntity();
		orderDataLogServiceMapper.mapOrderDataLogToOrderDataLogEntity(orderDataLog, orderDataLogEntity);
		OrderDataLogEntity orderDataLogEntitySaved = orderDataLogJpaRepository.save(orderDataLogEntity);
		return orderDataLogServiceMapper.mapOrderDataLogEntityToOrderDataLog(orderDataLogEntitySaved);
	}

	public OrderDataLog update(OrderDataLog orderDataLog) {
		OrderDataLogEntity orderDataLogEntity = orderDataLogJpaRepository.findById(orderDataLog.getOrderDataLogId()).orElse(null);
		orderDataLogServiceMapper.mapOrderDataLogToOrderDataLogEntity(orderDataLog, orderDataLogEntity);
		OrderDataLogEntity orderDataLogEntitySaved = orderDataLogJpaRepository.save(orderDataLogEntity);
		return orderDataLogServiceMapper.mapOrderDataLogEntityToOrderDataLog(orderDataLogEntitySaved);
	}

	public void delete(Integer orderDataLogId) {
		orderDataLogJpaRepository.deleteById(orderDataLogId);
	}

	public OrderDataLogJpaRepository getOrderDataLogJpaRepository() {
		return orderDataLogJpaRepository;
	}

	public void setOrderDataLogJpaRepository(OrderDataLogJpaRepository orderDataLogJpaRepository) {
		this.orderDataLogJpaRepository = orderDataLogJpaRepository;
	}

	public OrderDataLogServiceMapper getOrderDataLogServiceMapper() {
		return orderDataLogServiceMapper;
	}

	public void setOrderDataLogServiceMapper(OrderDataLogServiceMapper orderDataLogServiceMapper) {
		this.orderDataLogServiceMapper = orderDataLogServiceMapper;
	}

}
