/*
 * Created on 2021-09-27 ( Time 22:18:43 )
 * Generated by Telosys Tools Generator ( version 3.0.0 )
 */
package com.nit.order_library.business.service;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;
import javax.annotation.Resource;

import com.nit.order_library.bean.User;
import com.nit.order_library.bean.jpa.UserEntity;
import java.util.Date;
import java.util.List;

import com.nit.order_library.business.service.mapping.UserServiceMapper;
import com.nit.order_library.data.repository.jpa.UserJpaRepository;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.stereotype.Service;

/**
 * Definition of UserService
 */
@Service
@Transactional
public class UserService {

	@Resource
	private UserJpaRepository userJpaRepository;

	@Resource
	private UserServiceMapper userServiceMapper;
	
	public User findById(Integer userId) {
		Optional<UserEntity> userEntity = userJpaRepository.findById(userId);

		if (userEntity.isPresent())
			return userServiceMapper.mapUserEntityToUser(userEntity.get());
		else
			throw new IllegalStateException("object doesn't exist");
	}

	public List<User> findAll() {
		Iterable<UserEntity> entities = userJpaRepository.findAll();
		List<User> beans = new ArrayList<User>();
		for(UserEntity userEntity : entities) {
			beans.add(userServiceMapper.mapUserEntityToUser(userEntity));
		}
		return beans;
	}

	public User save(User user) {
		return update(user) ;
	}

	public User create(User user) {
		UserEntity userEntity;
		if(user.getUserId() != null){
			Optional<UserEntity> optional = userJpaRepository.findById(user.getUserId());
			if( optional.isPresent() ) {
				throw new IllegalStateException("already.exists");
			}
		}
		userEntity = new UserEntity();
		userServiceMapper.mapUserToUserEntity(user, userEntity);
		UserEntity userEntitySaved = userJpaRepository.save(userEntity);
		return userServiceMapper.mapUserEntityToUser(userEntitySaved);
	}

	public User update(User user) {
		UserEntity userEntity = userJpaRepository.findById(user.getUserId()).orElse(null);
		userServiceMapper.mapUserToUserEntity(user, userEntity);
		UserEntity userEntitySaved = userJpaRepository.save(userEntity);
		return userServiceMapper.mapUserEntityToUser(userEntitySaved);
	}

	public void delete(Integer userId) {
		userJpaRepository.deleteById(userId);
	}

	public UserJpaRepository getUserJpaRepository() {
		return userJpaRepository;
	}

	public void setUserJpaRepository(UserJpaRepository userJpaRepository) {
		this.userJpaRepository = userJpaRepository;
	}

	public UserServiceMapper getUserServiceMapper() {
		return userServiceMapper;
	}

	public void setUserServiceMapper(UserServiceMapper userServiceMapper) {
		this.userServiceMapper = userServiceMapper;
	}

}
