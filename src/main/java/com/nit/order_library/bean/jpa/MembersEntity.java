/*
 * Created on 2019-03-14 ( Time 17:22:22 )
 * Generated by Telosys Tools Generator ( version 3.0.0 )
 */
// This Bean has a basic Primary Key (not composite) 

package com.nit.order_library.bean.jpa;

import java.io.Serializable;

//import javax.validation.constraints.* ;
//import org.hibernate.validator.constraints.* ;

import java.util.Date;
import java.util.List;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.NamedQueries;
import javax.persistence.NamedQuery;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

import org.hibernate.annotations.DynamicInsert;

/**
 * Persistent class for entity stored in table "members"
 *
 * @author Telosys Tools Generator
 *
 */

@Entity
@DynamicInsert
@Table(name="members", catalog="niceorder" )
// Define named queries here
@NamedQueries ( {
  @NamedQuery ( name="MembersEntity.countAll", query="SELECT COUNT(x) FROM MembersEntity x" )
} )
public class MembersEntity implements Serializable {

    private static final long serialVersionUID = 1L;

    //----------------------------------------------------------------------
    // ENTITY PRIMARY KEY ( BASED ON A SINGLE FIELD )
    //----------------------------------------------------------------------
    @Id
    @GeneratedValue(strategy=GenerationType.IDENTITY)
    @Column(name="user_id", nullable=false)
    private Integer    userId       ;


    //----------------------------------------------------------------------
    // ENTITY DATA FIELDS 
    //----------------------------------------------------------------------    
    @Column(name="login_name", nullable=false, length=256)
    private String     loginName    ;

    @Column(name="password", nullable=false, length=256)
    private String     password     ;

    @Column(name="name", nullable=false, length=256)
    private String     name         ;

    @Temporal(TemporalType.TIMESTAMP)
    @Column(name="created_at", nullable=false)
    private Date       createdAt    ;

    @Column(name="delete_flag", nullable=false)
    private Integer    deleteFlag   ;



    //----------------------------------------------------------------------
    // ENTITY LINKS ( RELATIONSHIP )
    //----------------------------------------------------------------------
    @OneToMany(mappedBy="members", targetEntity=RolesEntity.class, fetch = FetchType.EAGER)
    private List<RolesEntity> listOfRoles ;


    //----------------------------------------------------------------------
    // CONSTRUCTOR(S)
    //----------------------------------------------------------------------
    public MembersEntity() {
		super();
    }
    
    //----------------------------------------------------------------------
    // GETTER & SETTER FOR THE KEY FIELD
    //----------------------------------------------------------------------
    public void setUserId( Integer userId ) {
        this.userId = userId ;
    }
    public Integer getUserId() {
        return this.userId;
    }

    //----------------------------------------------------------------------
    // GETTERS & SETTERS FOR FIELDS
    //----------------------------------------------------------------------
    //--- DATABASE MAPPING : login_name ( VARCHAR ) 
    public void setLoginName( String loginName ) {
        this.loginName = loginName;
    }
    public String getLoginName() {
        return this.loginName;
    }

    //--- DATABASE MAPPING : password ( VARCHAR ) 
    public void setPassword( String password ) {
        this.password = password;
    }
    public String getPassword() {
        return this.password;
    }

    //--- DATABASE MAPPING : name ( VARCHAR ) 
    public void setName( String name ) {
        this.name = name;
    }
    public String getName() {
        return this.name;
    }

    //--- DATABASE MAPPING : created_at ( DATETIME ) 
    public void setCreatedAt( Date createdAt ) {
        this.createdAt = createdAt;
    }
    public Date getCreatedAt() {
        return this.createdAt;
    }

    //--- DATABASE MAPPING : delete_flag ( INT ) 
    public void setDeleteFlag( Integer deleteFlag ) {
        this.deleteFlag = deleteFlag;
    }
    public Integer getDeleteFlag() {
        return this.deleteFlag;
    }


    //----------------------------------------------------------------------
    // GETTERS & SETTERS FOR LINKS
    //----------------------------------------------------------------------
    public void setListOfRoles( List<RolesEntity> listOfRoles ) {
        this.listOfRoles = listOfRoles;
    }
    public List<RolesEntity> getListOfRoles() {
        return this.listOfRoles;
    }


    //----------------------------------------------------------------------
    // toString METHOD
    //----------------------------------------------------------------------
    public String toString() { 
        StringBuffer sb = new StringBuffer(); 
        sb.append("["); 
        sb.append(userId);
        sb.append("]:"); 
        sb.append(loginName);
        sb.append("|");
        sb.append(password);
        sb.append("|");
        sb.append(name);
        sb.append("|");
        sb.append(createdAt);
        sb.append("|");
        sb.append(deleteFlag);
        return sb.toString(); 
    } 

}
